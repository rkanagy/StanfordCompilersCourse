/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;
import java.util.Enumeration;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
    
    /*
    Expression updateLetExpressionBodies(let letExpr, Expressions letExprs, Expression body) {
		let prevLetExpr = letExpr;
		let currLetExpr = null;
    	for (Enumeration e = letExprs.getElements(); e.hasMoreElements(); ) {
    		currLetExpr = (let) e.nextElement();
    		prevLetExpr.setBody(currLetExpr);
    		prevLetExpr = currLetExpr;
    	}
    	prevLetExpr.setBody(body);
    	
    	return letExpr;
    }
    */
    Expression updateLetExpressionBodies(Expressions letExprs, Expression body) {
		let letExpr = (let) letExprs.getNth(0);

    	if (letExprs.getLength() == 1) {
			letExpr.setBody(body);
    	}
    	else {
			let prevLetExpr = null;
			let currLetExpr = null;
	    	for (Enumeration e = letExprs.getElements(); e.hasMoreElements(); ) {
	    		if (prevLetExpr == null)
	    			prevLetExpr = (let) e.nextElement();
	    	    currLetExpr = (let) e.nextElement();
	    		prevLetExpr.setBody(currLetExpr);
	    		prevLetExpr = currLetExpr;
	    	}
	    	prevLetExpr.setBody(body);
    	}    	

    	return letExpr;
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expression expr;
nonterminal Expressions expression_list;
nonterminal Expressions block_expression_list;
nonterminal Expressions let_attribute_list;
nonterminal let let_attribute;
nonterminal Cases case_branch_list;
nonterminal branch case_branch;

/* Precedence declarations go here. */
precedence right    ASSIGN;
precedence nonassoc NOT;
precedence nonassoc LE, LT, EQ;
precedence left     PLUS, MINUS;
precedence left     MULT, DIV;
precedence nonassoc ISVOID;
precedence nonassoc NEG;
precedence nonassoc AT;
precedence left     DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI
	;

/* Feature list may be empty, but no empty features in list. */
feature_list
	::= feature:f
		{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| feature_list:fl feature:f
		{: RESULT = fl.appendElement(f); :}
	| /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	;

feature
	::= OBJECTID:n COLON TYPEID:t SEMI
		{: RESULT = new attr(curr_lineno(), n, t, new no_expr(curr_lineno())); :}
	| OBJECTID:n COLON TYPEID:t ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(), n, t, e); :}
	| OBJECTID:n LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), n, fl, t, e); :}
	| error SEMI
	;
	
formal_list
	::= formal:f
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	| /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	;
	
formal
	::= OBJECTID:n COLON TYPEID:t
		{: RESULT = new formalc(curr_lineno(), n, t); :}
	;
	
expr
	::= OBJECTID:n ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), n, e); :}
	| expr:e DOT OBJECTID:n LPAREN expression_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, n, el); :}
	| expr:e AT TYPEID:t DOT OBJECTID:n LPAREN expression_list:el RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e, t, n, el); :}
	| OBJECTID:n LPAREN expression_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(),
			new object(curr_lineno(), AbstractTable.idtable.addString("self")), n, el); :}
	| IF expr:ife THEN expr:the ELSE expr:ele FI
		{: RESULT = new cond(curr_lineno(), ife, the, ele); :}
	| WHILE expr:ce LOOP expr:le POOL
		{: RESULT = new loop(curr_lineno(), ce, le); :}
	| LBRACE block_expression_list:bel RBRACE
		{: RESULT = new block(curr_lineno(), bel); :}
	| LET let_attribute_list:lal IN expr:e
		{: RESULT = updateLetExpressionBodies(lal, e); :}
	| CASE expr:e OF case_branch_list:bl case_branch:b ESAC
		{: bl.appendElement(b);
		   RESULT = new typcase(curr_lineno(), e, bl); :}
	| NEW TYPEID:t
		{: RESULT = new new_(curr_lineno(), t); :}
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	| expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	| expr:le LT expr:re
		{: RESULT = new lt(curr_lineno(), le, re); :}
	| expr:le LE expr:re
		{: RESULT = new leq(curr_lineno(), le, re); :}
	| expr:le EQ expr:re
		{: RESULT = new eq(curr_lineno(), le, re); :}
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
	| OBJECTID:n
		{: RESULT = new object(curr_lineno(), n); :}
	| INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	;

case_branch_list
	::= case_branch:b
		{: RESULT = (new Cases(curr_lineno())).appendElement(b); :}
	| case_branch_list:bl case_branch:b
		{: RESULT = bl.appendElement(b); :}
	| /* empty */
		{: RESULT = new Cases(curr_lineno()); :}
	;
	
case_branch
	::= OBJECTID:n COLON TYPEID:t DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), n, t, e); :}
	;
	
let_attribute_list
	::= let_attribute:la /*COMMA let_attribute:la*/
		{: RESULT = (new Expressions(curr_lineno())).appendElement(la); :}
	| let_attribute_list:lal COMMA let_attribute:la
		{: RESULT = lal.appendElement(la); :}
	/*|*/ /* empty */
		/*{: RESULT = new Expressions(curr_lineno()); :}*/
	| error COMMA
	;
	
let_attribute
	::= OBJECTID:n COLON TYPEID:t
		{: RESULT = new let(curr_lineno(), n, t, 
			new no_expr(curr_lineno()), 
			new no_expr(curr_lineno())); :}
	| OBJECTID:n COLON TYPEID:t ASSIGN expr:ae
		{: RESULT = new let(curr_lineno(), n, t, ae,
			new no_expr(curr_lineno())); :}
	| error TYPEID
	| error expr
	;
	
block_expression_list
	::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| block_expression_list:el expr:e SEMI
		{: if (el == null)
		       el = new Expressions(curr_lineno());
		   RESULT = el.appendElement(e); :}
	| error SEMI
	;
	
expression_list
	::= expr:e
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expression_list:el COMMA expr:e
		{: RESULT = el.appendElement(e); :}
	| /* empty */
		{: RESULT = new Expressions(curr_lineno()); :}
	;
